Εργασία 2η
ΛΕΙΤΟΥΡΓΙΚΑ ΣΥΣΤΗΜΑΤΑ 
ΟΝΟΜΑ: Τσίγκα Μαρία-Χριστίνα 
ΑΜ: 1115202100194

Η εργασία επικεντρώνεται στην ενίσχυση του συστήματος αρχείων του xv6 για να υποστηρίξει 
μεγαλύτερα αρχεία και διπλά-έμμεσες διευθύνσεις. Στο αρχικό σύστημα, οι inodes περιλαμβάνουν 
12 άμεσες διευθύνσεις που αναφέρονται άμεσα σε blocks δεδομένων και 1 έμμεση διεύθυνση που δείχνει 
σε ένα block με άλλες 256 διευθύνσεις. Αυτός ο σχεδιασμός επιτρέπει την αποθήκευση αρχείων μέχρι 
268 blocks (12 άμεσα blocks και 256 από την απλά-έμμεση διεύθυνση).

Ωστόσο, αυτό το όριο δεν επαρκεί για τη διαχείριση μεγάλων αρχείων. Έτσι, η εργασία 
επικεντρώνεται στην προσθήκη μιας διπλά-έμμεσης διεύθυνσης (double indirect), η οποία δείχνει
σε μια απλά-έμμεση διεύθυνση που αναφέρεται σε άλλα 256 έμμεσα blocks, το καθένα από τα οποία 
περιέχει 256 αριθμούς block. Αυτή η προσθήκη αυξάνει τη μέγιστη χωρητικότητα του αρχείου 
σε 65.803 blocks (11 άμεσα blocks + 256 απλά-έμμεσες διευθύνσεις + 256x256 διπλά-έμμεσες διευθύνσεις).

Για να πραγματοποιηθεί αυτή η αλλαγή, έχουμε επεξεργασθεί τις συναρτήσεις του συστήματος 
αρχείων του xv6. Η συνάρτηση bmap() τροποποιήθηκε ώστε να χειρίζεται και την διπλά-έμμεση 
διεύθυνση κατά την ανάγνωση και εγγραφή αρχείων. Επιπλέον, η συνάρτηση itrunc()
επεκτάθηκε για να διαχειρίζεται σωστά την απελευθέρωση όλων των blocks του αρχείου,
συμπεριλαμβανομένων των διπλά-έμμεσων.

Η αλλαγή αυτή καθιστά δυνατή την αποθήκευση μεγαλύτερων αρχείων, ενώ δδιατηρεί τη δομή 
των inodes αμετάβλητη, αφού προστέθηκαν επιπλέον διευθύνσεις στον πίνακα addrs[] χωρίς να 
αλλάξει το μέγεθος του inode στον δίσκο. 


ΜΕΓΑΛΑ ΑΡΧΕΙΑ:

-Στο αρχείο fs.h, οι ορισμοί των σταθερών που σχετίζονται με τον αριθμό των δεικτών σε
ένα inode έγιναν ως εξής:

    #define NDIRECT 11
    #define NINDIRECT (BSIZE / sizeof(uint))
    #define NDINDIRECT (NINDIRECT * NINDIRECT)
    #define MAXFILE (NDIRECT + NINDIRECT + NDINDIRECT)
    #define ADDR_PER_BLOCK (BSIZE / sizeof(uint))

    -NDIRECT: Ο αριθμός των άμεσων διευθύνσεων που μπορεί να έχει ένα inode γίνεται 11 για να 
              υπάρξει χώρος για τη νέα διπλά-έμμεση διεύθυνση.
    -NINDIRECT: Ο αριθμός των διευθύνσεων που μπορούν να αποθηκευτούν σε ένα block που 
                χρησιμοποιείται για έμμεσες διευθύνσεις υπολογίζεται με βάση το μέγεθος
                του block (BSIZE) και το μέγεθος του τύπου uint. 
    -NDINDIRECT: Αυτός ο αριθμός καθορίζει το μέγεθος της διπλά-έμμεσης διεύθυνσης.
                 Υπολογίζεται με το τετράγωνο του αριθμού των διευθύνσεων σε ένα έμμεσο block,
                 επιτρέποντας τη διαχείριση μεγαλύτερων αρχείων μέσω της ιεραρχίας των διευθύνσεων.
    -MAXFILE: Ο μέγιστος αριθμός blocks που μπορεί να περιέχει ένα αρχείο είναι το άθροισμα 
              των άμεσων, έμμεσων και διπλά-έμμεσων blocks.
    -ADDR_PER_BLOCK: Υπολογίζεται ο αριθμός των διευθύνσεων που μπορούν να αποθηκευτούν 
                     σε ένα block δεδομένων, που βοηθά στον καθορισμό του μεγέθους του κάθε block 
                     αναφοράς.

-Στο αρχείο fs.h έγινε επίσης η τροποποίηση του uint addrs[NDIRECT+1] σε uint addrs[NDIRECT+2]. 
Αυτό σημαίνει ότι προσθέτουμε έναν ακόμη δείκτη στον πίνακα των addrs. Ο νέος δείκτης είναι αυτός 
που θα χρησιμοποιείται για το δεύτερο επίπεδο των έμμεσων (διπλά-έμμεσων) διευθύνσεων , επιτρέποντας 
την αποθήκευση περισσότερων δεδομένων.

-Η συνάρτηση bmap είναι υπεύθυνη για την ανάκτηση του block δεδομένων που αντιστοιχεί 
σε ένα συγκεκριμένο byte του αρχείου. Με την προσθήκη υποστήριξης για διπλά-έμμεσες 
διευθύνσεις, ο κώδικας της συνάρτησης τροποποιείται για να διαχειριστεί τη νέα ιεραρχία 
δεικτών. Αρχικά, το bn (block number) μειώνεται κατά το ποσό των πρώτων έμμεσων blocks 
(NINDIRECT), αφού τα blocks δεδομένων μπορούν να τοποθετούνται είτε άμεσα είτε μέσω 
ενός ή δύο επιπέδων έμμεσων δεικτών. Στη συνέχεια, υπολογίζονται οι δείκτες idx2 και 
idx1, οι οποίοι αντιστοιχούν στο δεύτερο και πρώτο επίπεδο των έμμεσων blocks.
Όταν η συνάρτηση συναντά το δεύτερο επίπεδο έμμεσου δείκτη, ελέγχει αν το διπλά-έμμεσο 
block έχει ήδη δημιουργηθεί. Εάν όχι, καλείται η συνάρτηση balloc για τη δημιουργία του
και ανατίθεται στον αντίστοιχο δείκτη του inode. Στη συνέχεια, η συνάρτηση διαβάζει το 
δεύτερο επίπεδο block και, αν η διεύθυνση του πρώτου επιπέδου block που αναφέρεται από 
αυτό είναι άδεια, δημιουργεί το κατάλληλο πρώτο επίπεδο block. Όταν το πρώτο επίπεδο 
block είναι έτοιμο, η συνάρτηση επιστρέφει τη διεύθυνση του δεδομένου block.

-Η συνάρτηση itrunc είναι υπεύθυνη για την απελευθέρωση των blocks που 
χρησιμοποιούνται από ένα αρχείο, όταν το μέγεθός του μειώνεται ή όταν το αρχείο 
διαγράφεται. Στην περίπτωση των διπλά-έμμεσων δεικτών, η συνάρτηση τροποποιείται για 
να εξασφαλίσει την σωστή αποδέσμευση των blocks αυτών, κάτι που είναι απαραίτητο όταν 
τα αρχεία έχουν διαρθρωθεί σε πολλαπλά επίπεδα δεικτών. Συγκεκριμένα, ελέγχεται αν υπάρχει
το δεύτερο επίπεδο του διπλά-έμμεσου δείκτη μέσω του δείκτη ip->addrs[NDIRECT + 1].
Εάν το δεύτερο επίπεδο block υπάρχει, η συνάρτηση διαβάζει αυτό το block και στη συνέχεια 
επεξεργάζεται κάθε δείκτη του πρώτου επιπέδου, απελευθερώνοντας τα blocks που αναφέρονται 
από αυτούς. Η διαδικασία συνεχίζεται με την απελευθέρωση του δεύτερου επιπέδου του
διπλά-έμμεσου δείκτη και, τέλος, ο ίδιος ο δείκτης στο inode τίθεται σε μηδέν.


ΣΥΜΒΟΛΙΚΟΙ ΣΥΝΔΕΣΜΟΙ

Το δεύτερο μέρος της εργασίας αφορά την υλοποίηση της υποστήριξης συμβολικών συνδέσμων (symlinks)
στο σύστημα αρχείων του xv6. Οι συμβολικοί σύνδεσμοι επιτρέπουν την αναφορά σε αρχεία ή καταλόγους μέσω 
ενός ονόματος μονοπατιού. Η εργασία περιλαμβάνει την προσθήκη της κλήσης συστήματος symlink για τη δημιουργία αυτών 
των συνδέσμων και την τροποποίηση της κλήσης open για να επιτρέπει την αναγνώριση και ακολούθησή τους.

-Προστέθηκε ο τύπος αρχείου T_SYMLINK στο αρχείο stat.h.

-Προστέθηκε η σημαία O_NOFOLLOW στο fcntl.h για χρήση στην open().

-Προστέθηκε ο ορισμός της κλήσης συστήματος symlink στο user.h.

-Προστέθηκε η αντίστοιχη καταχώρηση στην usys.pl: 

        entry("symlink");

-Προστέθηκε ο κωδικός της symlink στο syscall.h:

        #define SYS_symlink 22

-Ενημερώθηκε το syscall.c για να καταχωρηθεί η κλήση συστήματος:

        extern uint64 sys_symlink(void);

        static uint64 (*syscalls[])(void) = {
             ...
            [SYS_symlink] sys_symlink,
        };

-Προστέθηκε έλεγχος στην sys_open ώστε να αναγνωρίζεται όταν ένα αρχείο είναι συμβολικός σύνδεσμος και να 
ακολουθείται το μονοπάτι που περιέχεται στον σύνδεσμο, εφόσον η σημαία O_NOFOLLOW δεν έχει οριστεί.
Ο κώδικας ελέγχει αν το αρχείο είναι συμβολικός σύνδεσμος (symlink) και αν επιτρέπεται η ακολούθηση των symlinks, 
βασισμένος στην σημαία O_NOFOLLOW. Αν το αρχείο είναι symlink και η σημαία δεν εμποδίζει την ακολουθία του,
τότε ξεκινά μια επαναληπτική διαδικασία για την επίλυση του symlink. Διαβάζει το μονοπάτι του στόχου
του symlink από το inode και αναζητά το νέο inode του στόχου μέσω της συνάρτησης namei. Αν το νέο inode 
είναι και αυτό symlink, η διαδικασία συνεχίζεται για τον επόμενο symlink. Αν το βάθος ξεπεράσει το όριο 
MAX_SYMLINK_DEPTH ή αν το symlink οδηγεί σε μη υπάρχον αρχείο, η λειτουργία επιστρέφει σφάλμα. Διαφορετικά,
όταν βρεθεί το πραγματικό αρχείο (όχι symlink), η διαδικασία τερματίζεται κανονικά.


-Η συνάρτηση sys_symlink υλοποιεί την κλήση συστήματος symlink, δημιουργώντας έναν συμβολικό
σύνδεσμο που συνδέει έναν "στόχο" (target) με ένα "μονοπάτι" (path). Αρχικά, διαβάζει τις
παραμέτρους από τον χώρο χρήστη, ξεκινά μια ασφαλή λειτουργία στο σύστημα αρχείων,
και δημιουργεί ένα νέο inode για τον συμβολικό σύνδεσμο με τύπο T_SYMLINK. Στη συνέχεια,
αποθηκεύει το μονοπάτι του στόχου στο inode χρησιμοποιώντας τη writei. 
